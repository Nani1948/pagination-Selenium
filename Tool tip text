
package com.seleniumcucumberframework.qa.tooltip;

import java.time.Duration;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import io.github.bonigarcia.wdm.WebDriverManager;

public class DynamicToolTip {

	public static void main(String[] args) {
		WebDriverManager.chromedriver().setup();
		WebDriver driver= new ChromeDriver();
		driver.get("https://demoqa.com/tool-tips");
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		WebDriverWait wait=new WebDriverWait(driver,Duration.ofSeconds(50));
		JavascriptExecutor js = (JavascriptExecutor) driver;
		//1 Identify the element of tooltip that trigger.
		WebElement triggedToolTip=driver.findElement(By.xpath("//button[@id='toolTipButton']"));
		Actions action=new Actions(driver);
		action.moveToElement(triggedToolTip).click().build().perform();
		/*WebElement toolTipTextVisible=wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("//button[contains(@aria-describedby,'buttonToolTip')]")));
		
        String  toolTipText=toolTipTextVisible.getText();
        System.out.println(toolTipText);
        String  actualToolTipText="You hovered over the Button";
        if(toolTipText.equals(actualToolTipText)) {
        	System.out.println("Both are equal");
        }
        else {
        	System.out.println("Both are not equal");
        }*/
		  WebElement toolTip = driver.findElement(By.className("tooltip-inner"));

          // Ensure tooltip is visible using JavaScript
          Boolean isVisible = (Boolean) js.executeScript("return arguments[0].offsetParent !== null;", toolTip);

          if (isVisible) {
              // Capture and print tooltip text
              String tooltipText = (String) js.executeScript("return arguments[0].textContent;", toolTip);
              System.out.println("Tooltip Text (Visible): " + tooltipText);
          } else {
              System.out.println("Tooltip is not visible.");
          }
	}

}

Click Action Using JavaScriptExecutor: Ensures the button is clicked properly.
‚úÖ Wait for Visibility: Uses Thread.sleep(2000), replaceable with WebDriverWait for stability.
‚úÖ JavaScript to Check Visibility: offsetParent !== null confirms if the tooltip is on-screen.
‚úÖ Extract Text Using JavaScript: textContent ensures tooltip text is captured, avoiding Selenium

1Ô∏è‚É£ Using Actions Class (Preferred for Hover Tooltips):
 If the tooltip appears on hover, use Actions to trigger it.
Actions actions = new Actions(driver);
actions.moveToElement(hoverButton).perform();  // Hover over the element
WebElement toolTip = driver.findElement(By.className("tooltip-inner"));
System.out.println("Tooltip Text: " + toolTip.getText());  // Capture text
Works well if the tooltip remains visible after hover.

Using JavaScriptExecutor (mouseover Event):
 If the tooltip disappears quickly, force it to appear using JavaScript:JavascriptExecutor js = (JavascriptExecutor) driver;
js.executeScript("var evt = document.createEvent('MouseEvents'); evt.initEvent('mouseover', true, true); arguments[0].dispatchEvent(evt);", hoverButton);
Thread.sleep(2000);  // Ensure tooltip appears
WebElement toolTip = driver.findElement(By.className("tooltip-inner"));
System.out.println("Tooltip Text: " + toolTip.getText());
 Ensures tooltips triggered by hover appear properly.
3Ô∏è‚É£ Using JavaScriptExecutor (click Event for Clickable Tooltips)
üîπ If the tooltip appears on click, simulate a click:
js.executeScript("arguments[0].click();", hoverButton);
Thread.sleep(2000);
WebElement toolTip = driver.findElement(By.className("tooltip-inner"));
System.out.println("Tooltip Text: " + toolTip.getText());
‚úÖ Works well when tooltips are revealed on click.

4Ô∏è‚É£ Using JavaScript to Extract textContent Directly
üîπ If getText() fails to capture tooltip text, use JavaScript:
String tooltipText = (String) js.executeScript("return arguments[0].textContent;", toolTip);
System.out.println("Tooltip Text: " + tooltipText);
Works when tooltips are dynamically generated.
 Using WebDriverWait for Tooltip Visibility
5Ô∏è‚É£ Using WebDriverWait for Tooltip Visibility
üîπ If tooltips take time to appear, use explicit wait:
WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
WebElement toolTip = wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("tooltip-inner")));
System.out.println("Tooltip Text: " + toolTip.getText());
 Ensures Selenium waits for the tooltip before capturing text.
6.6Ô∏è‚É£ Using offsetParent to Check Visibility
üîπ Ensure the tooltip is actually visible:
Boolean isVisible = (Boolean) js.executeScript("return arguments[0].offsetParent !== null;", toolTip);
if (isVisible) {
    String tooltipText = toolTip.getText();
    System.out.println("Tooltip Text: " + tooltipText);
}
Prevents capturing text when tooltip is hidden.
